"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[883],{7066:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var r=s(4344);const n={},i=r.createContext(n);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},8207:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api/resetStore","title":"resetStore","description":"The resetStore function resets the store to its initial state and clears any persisted data from the storage engine. This is useful when you need to revert your application to a known starting state, such as during user logout or for debugging purposes.","source":"@site/docs/api/resetStore.md","sourceDirName":"api","slug":"/api/resetStore","permalink":"/zustand-storage/api/resetStore","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"alphadevking","lastUpdatedAt":1740941703000,"frontMatter":{"title":"resetStore","sidebar_label":"resetStore"},"sidebar":"api","previous":{"title":"addMiddleware","permalink":"/zustand-storage/api/addMiddleware"},"next":{"title":"fetchFromDB","permalink":"/zustand-storage/api/fetchFromDB"}}');var n=s(612),i=s(7066);const o={title:"resetStore",sidebar_label:"resetStore"},a="resetStore",d={},l=[{value:"Usage",id:"usage",level:2},{value:"Additional Notes",id:"additional-notes",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"resetstore",children:"resetStore"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"resetStore"})," function resets the store to its initial state and clears any persisted data from the storage engine. This is useful when you need to revert your application to a known starting state, such as during user logout or for debugging purposes."]}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import store from './store';\n\n// Reset the store to its initial state and clear persisted data\nstore.resetStore();\n"})}),"\n",(0,n.jsx)(t.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"State Reversion:"}),"\n",(0,n.jsx)(t.code,{children:"resetStore"})," replaces the current state with the predefined initial state, ensuring a clean slate."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Clearing Persistence:"}),"\nIn addition to resetting the in-memory state, this function also removes the corresponding persisted data from the storage engine, ensuring that the reset state is maintained across sessions."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Use Cases:"}),"\nConsider using ",(0,n.jsx)(t.code,{children:"resetStore"})," in scenarios like user logout, error recovery, or when a complete state refresh is required."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["By using ",(0,n.jsx)(t.code,{children:"resetStore"}),", you can easily revert your application to its default state, providing a straightforward mechanism for state management resets."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);