"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[259],{3494:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Introduction","href":"/zustand-storage/docs","docId":"intro","unlisted":false},{"type":"category","label":"Getting Started","collapsed":false,"items":[{"type":"link","label":"Installation","href":"/zustand-storage/getting-started/installation","docId":"getting-started/installation","unlisted":false},{"type":"link","label":"Configuration","href":"/zustand-storage/getting-started/configuration","docId":"getting-started/configuration","unlisted":false},{"type":"link","label":"TypeScript Support","href":"/zustand-storage/getting-started/typescript-support","docId":"getting-started/typescript-support","unlisted":false}],"collapsible":true,"href":"/zustand-storage/getting-started"}],"api":[{"type":"category","label":"API Reference","items":[{"type":"link","label":"createSyncedStore","href":"/zustand-storage/api/createSyncedStore","docId":"api/createSyncedStore","unlisted":false},{"type":"link","label":"useStore","href":"/zustand-storage/api/useStore","docId":"api/useStore","unlisted":false},{"type":"link","label":"actions","href":"/zustand-storage/api/actions","docId":"api/actions","unlisted":false},{"type":"link","label":"getState","href":"/zustand-storage/api/getState","docId":"api/getState","unlisted":false},{"type":"link","label":"setState","href":"/zustand-storage/api/setState","docId":"api/setState","unlisted":false},{"type":"link","label":"subscribe","href":"/zustand-storage/api/subscribe","docId":"api/subscribe","unlisted":false},{"type":"link","label":"persist","href":"/zustand-storage/api/persist","docId":"api/persist","unlisted":false},{"type":"link","label":"rehydrate","href":"/zustand-storage/api/rehydrate","docId":"api/rehydrate","unlisted":false},{"type":"link","label":"addMiddleware","href":"/zustand-storage/api/addMiddleware","docId":"api/addMiddleware","unlisted":false},{"type":"link","label":"resetStore","href":"/zustand-storage/api/resetStore","docId":"api/resetStore","unlisted":false},{"type":"link","label":"fetchFromDB","href":"/zustand-storage/api/fetchFromDB","docId":"api/fetchFromDB","unlisted":false},{"type":"link","label":"saveToDB","href":"/zustand-storage/api/saveToDB","docId":"api/saveToDB","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/zustand-storage/api"},{"type":"link","label":"Types","href":"/zustand-storage/api/types/","docId":"api/types/index","unlisted":false}]},"docs":{"api/actions":{"id":"api/actions","title":"actions","description":"The actions object includes all the functions you define when creating your synced store with createSyncedStore. These actions provide a clean interface for updating state, performing asynchronous tasks, and managing side effects.","sidebar":"api"},"api/addMiddleware":{"id":"api/addMiddleware","title":"addMiddleware","description":"The addMiddleware function allows you to register custom middleware that processes and potentially transforms the store\'s state whenever it updates. This is useful for adding side effects, logging, state normalization, or any other custom behavior that needs to be applied to state changes.","sidebar":"api"},"api/createSyncedStore":{"id":"api/createSyncedStore","title":"createSyncedStore","description":"createSyncedStore is the primary function used to create a synced store that integrates state management with persistence and optional database support. It allows you to effortlessly set up a store with automatic rehydration, configurable merge strategies, and even database synchronization.","sidebar":"api"},"api/fetchFromDB":{"id":"api/fetchFromDB","title":"fetchFromDB","description":"The fetchFromDB function is an optional method available when database integration is configured in your store. It fetches data from the external database and merges it into your current state based on the defined merge strategy.","sidebar":"api"},"api/getState":{"id":"api/getState","title":"getState","description":"The getState function retrieves the current state of your store. It provides a synchronous snapshot of the state, which can be useful for debugging, conditional logic, or operations outside of React components.","sidebar":"api"},"api/index":{"id":"api/index","title":"API Reference","description":""},"api/persist":{"id":"api/persist","title":"persist","description":"The persist function is used to manually trigger the persistence of the store\'s current state to the configured storage engine. This can be useful when you want to ensure that the latest state is saved immediately, outside of the automatic persistence triggers.","sidebar":"api"},"api/rehydrate":{"id":"api/rehydrate","title":"rehydrate","description":"The rehydrate function reloads the store\'s state from the persisted storage. It merges the persisted state with the initial state using the configured merge strategy, ensuring that your application starts with the most up-to-date state.","sidebar":"api"},"api/resetStore":{"id":"api/resetStore","title":"resetStore","description":"The resetStore function resets the store to its initial state and clears any persisted data from the storage engine. This is useful when you need to revert your application to a known starting state, such as during user logout or for debugging purposes.","sidebar":"api"},"api/saveToDB":{"id":"api/saveToDB","title":"saveToDB","description":"The saveToDB function is an optional method available when database integration is configured in your store. It saves the current state of your store to the external database, updating an existing record if one is found or inserting a new record otherwise.","sidebar":"api"},"api/setState":{"id":"api/setState","title":"setState","description":"setState is a function provided by the store to update the state. It accepts either a partial state object or a function that returns a partial state update, allowing for both direct and functional updates.","sidebar":"api"},"api/subscribe":{"id":"api/subscribe","title":"subscribe","description":"The subscribe function allows you to listen for changes in the store\'s state. It accepts a callback function that will be invoked every time the state is updated.","sidebar":"api"},"api/types/index":{"id":"api/types/index","title":"Types","description":"Zustand Storage leverages TypeScript interfaces and types to provide a robust, type-safe API for state management with persistence and optional database integration. This section outlines the key interfaces and types used within the package.","sidebar":"api"},"api/useStore":{"id":"api/useStore","title":"useStore","description":"The useStore hook provides a convenient way to access the store\'s current state and its associated actions within your React components. It ensures that your components re-render automatically when the state changes.","sidebar":"api"},"getting-started/configuration":{"id":"getting-started/configuration","title":"Configuration","description":"In this guide, you\'ll learn how to configure your synced store. You can customize persistence options, merge strategies, and more.","sidebar":"docs"},"getting-started/getting-started":{"id":"getting-started/getting-started","title":"getting-started","description":""},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"To install Zustand Storage, make sure you have Node.js (version 18.0 or above) installed. Then, run the following command in your terminal:","sidebar":"docs"},"getting-started/typescript-support":{"id":"getting-started/typescript-support","title":"TypeScript Support","description":"Zustand Storage is built with TypeScript, ensuring strong type safety for your state and actions. Define interfaces for your state and actions to fully leverage these benefits:","sidebar":"docs"},"intro":{"id":"intro","title":"Introduction","description":"Zustand Storage is a universal state management solution that combines @aivron/sync-storage and zust-api to provide seamless persistence, middleware, and optional database integration for React apps.","sidebar":"docs"}}}}')}}]);