"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[200],{2640:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api/setState","title":"setState","description":"setState is a function provided by the store to update the state. It accepts either a partial state object or a function that returns a partial state update, allowing for both direct and functional updates.","source":"@site/docs/api/setState.md","sourceDirName":"api","slug":"/api/setState","permalink":"/api/setState","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"alphadevking","lastUpdatedAt":1740874064000,"frontMatter":{"title":"setState","sidebar_label":"setState"},"sidebar":"api","previous":{"title":"getState","permalink":"/api/getState"},"next":{"title":"subscribe","permalink":"/api/subscribe"}}');var a=s(612),r=s(7066);const i={title:"setState",sidebar_label:"setState"},o="setState",l={},c=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Additional Notes",id:"additional-notes",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"setstate",children:"setState"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"setState"})," is a function provided by the store to update the state. It accepts either a partial state object or a function that returns a partial state update, allowing for both direct and functional updates."]}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import store from './store';\n\n// Direct update with a partial state object:\nstore.setState({ count: 10 });\n\n// Functional update using a callback:\nstore.setState((prevState) => ({ count: prevState.count + 1 }));\n"})}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"partial:"})," A partial state object or a function that receives the current state and returns a partial state."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"replace (optional):"})," A boolean flag that, if set to ",(0,a.jsx)(t.code,{children:"true"}),", replaces the entire state with the new state provided."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,a.jsx)(t.p,{children:"This function does not return a value. It updates the store's state and triggers a re-render in components that subscribe to the state."}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.p,{children:"Below is an example demonstrating both types of state updates:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"import store from './store';\n\n// Update using a partial state object:\nstore.setState({ count: 5 });\n\n// Update using a function:\nstore.setState((prev) => ({ count: prev.count + 2 }));\n"})}),"\n",(0,a.jsx)(t.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Re-rendering:"}),"\nCalling ",(0,a.jsx)(t.code,{children:"setState"})," will trigger re-renders in all components that are subscribed to the store, ensuring your UI reflects the updated state."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Persistence:"}),"\nIf persistence is configured, every call to ",(0,a.jsx)(t.code,{children:"setState"})," may trigger a persistence operation based on the defined ",(0,a.jsx)(t.code,{children:"syncOptions"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"setState"})," provides a flexible mechanism to update your application's state while seamlessly integrating with the persistence layer."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},7066:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(4344);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);