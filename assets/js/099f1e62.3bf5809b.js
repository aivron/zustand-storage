"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[781],{7066:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>c});var n=t(4344);const r={},i=n.createContext(r);function a(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:s},e.children)}},7972:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"api/subscribe","title":"subscribe","description":"The subscribe function allows you to listen for changes in the store\'s state. It accepts a callback function that will be invoked every time the state is updated.","source":"@site/docs/api/subscribe.md","sourceDirName":"api","slug":"/api/subscribe","permalink":"/zustand-storage/api/subscribe","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"alphadevking","lastUpdatedAt":1740941703000,"frontMatter":{"title":"subscribe","sidebar_label":"subscribe"},"sidebar":"api","previous":{"title":"setState","permalink":"/zustand-storage/api/setState"},"next":{"title":"persist","permalink":"/zustand-storage/api/persist"}}');var r=t(612),i=t(7066);const a={title:"subscribe",sidebar_label:"subscribe"},c="subscribe",o={},l=[{value:"Usage",id:"usage",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Additional Notes",id:"additional-notes",level:2}];function u(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"subscribe",children:"subscribe"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"subscribe"})," function allows you to listen for changes in the store's state. It accepts a callback function that will be invoked every time the state is updated."]}),"\n",(0,r.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"import store from './store';\n\nconst unsubscribe = store.subscribe((newState) => {\n  console.log(\"State changed:\", newState);\n});\n\n// When you no longer need to listen to state changes, call the unsubscribe function:\nunsubscribe();\n"})}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"listener"}),": A callback function that receives the updated state whenever a change occurs."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:"A function that, when invoked, unsubscribes the listener from future state updates."}),"\n",(0,r.jsx)(s.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Side Effects:"}),"\nUse ",(0,r.jsx)(s.code,{children:"subscribe"})," to trigger side effects (e.g., logging, analytics) when the state changes."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Memory Management:"}),"\nAlways call the unsubscribe function when the listener is no longer needed to avoid memory leaks."]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);